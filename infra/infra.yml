AWSTemplateFormatVersion: '2010-09-09'

Parameters:

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  LatestAmiId:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:

  WebApiInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      SecurityGroups: [!Ref 'WebApiSecurityGroup']
      KeyName: !Ref 'KeyName'
      ImageId: !Ref 'LatestAmiId'
      Tags: 
        - Key: "Name"
          Value: "WebApi"
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo yum install git -y
            git version
            git clone https://github.com/rafbaptista/ObservabilityDemo
            sudo yum install docker -y
            docker version
            sudo usermod -a -G docker ec2-user
            id ec2-user
            wget https://github.com/docker/compose/releases/download/v2.5.1/docker-compose-linux-x86_64
            sudo mv docker-compose-linux-x86_64 /usr/local/bin/docker-compose
            sudo chmod -v +x /usr/local/bin/docker-compose
            sudo systemctl enable docker.service
            sudo systemctl start docker.service
            sudo chmod 666 ../../var/run/docker.sock
            docker build -t webapidemo ObservabilityDemo/app/DemoWebApi
            docker run -t -d -p 80:80 --name webapidemo webapidemo

  WebApiSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'SSHLocation'
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !Ref 'SSHLocation'
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 443
        CidrIp: !Ref 'SSHLocation'

  ObservabilityInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      SecurityGroups: [!Ref 'ObservabilitySecurityGroup']
      KeyName: !Ref 'KeyName'
      ImageId: !Ref 'LatestAmiId'
      Tags: 
        - Key: "Name"
          Value: "Observability"
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo yum install git -y
            git version
            git clone https://github.com/rafbaptista/ObservabilityDemo
            sudo yum install docker -y
            docker version
            sudo usermod -a -G docker ec2-user
            id ec2-user
            wget https://github.com/docker/compose/releases/download/v2.5.1/docker-compose-linux-x86_64
            sudo mv docker-compose-linux-x86_64 /usr/local/bin/docker-compose
            sudo chmod -v +x /usr/local/bin/docker-compose
            sudo systemctl enable docker.service
            sudo systemctl start docker.service
            sudo chmod 666 ../../var/run/docker.sock
            docker compose -f ObservabilityDemo/infra/docker-compose-observability.yml up


  ObservabilitySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !Ref 'SSHLocation'
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 443
        CidrIp: !Ref 'SSHLocation'
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'SSHLocation'
          

Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'WebApiInstance'
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [WebApiInstance, AvailabilityZone]
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt [WebApiInstance, PublicDnsName]
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt [WebApiInstance, PublicIp]